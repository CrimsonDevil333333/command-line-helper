name: Rust

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  CARGO_TERM_COLOR: always

jobs:
  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: [build-linux]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # required for full analysis context

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ matrix.toolchain }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.toolchain }}-
            ${{ runner.os }}-cargo-

      - name: Install Rust
        run: rustup update stable

      - name: Install cargo-tarpaulin
        run: cargo install cargo-tarpaulin

      - name: Generate test coverage report
        run: |
          mkdir -p coverage
          cargo tarpaulin --out Lcov Xml --output-dir coverage

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: tarpaulin-coverage-report
          path: coverage/tarpaulin-report.xml

      - name: Cache SonarQube Rust dependencies
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonarqube-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-sonarqube-

      - name: Run SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        toolchain:
          - stable-x86_64-pc-windows-msvc

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2.22.0

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ matrix.toolchain }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.toolchain }}-
            ${{ runner.os }}-cargo-
            
      - name: Update Rust toolchain
        run: rustup update ${{ matrix.toolchain }} && rustup default ${{ matrix.toolchain }}

      - name: Build
        run: cargo build --release

      - name: Run tests
        run: cargo test

      - name: Package and Upload Release Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-windows
          path: target/release/command_line_helper.exe

  build-linux:
    runs-on: ubuntu-latest
    needs: build-windows
    strategy:
      matrix:
        toolchain:
          - stable-x86_64-unknown-linux-gnu

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ matrix.toolchain }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.toolchain }}-
            ${{ runner.os }}-cargo-

      - name: Update Rust toolchain
        run: rustup update ${{ matrix.toolchain }} && rustup default ${{ matrix.toolchain }}

      - name: Build
        run: cargo build --release

      - name: Package and Upload Release Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-linux
          path: target/release/command_line_helper

  release:
    runs-on: ubuntu-latest
    needs: sonarqube
    permissions:
      contents: read
    steps:
      - name: Download Windows Artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts-windows
          path: target/release/

      - name: Download Linux Artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts-linux
          path: target/release/

      - name: Generate release tag
        id: tag
        run: |
          echo "release_tag=UserBuild_$(date +"%Y.%m.%d_%H-%M")" >> "$GITHUB_OUTPUT"

      - name: GH Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          files: target/release/*
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
